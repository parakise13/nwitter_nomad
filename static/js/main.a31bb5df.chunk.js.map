{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","dbService","storageService","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","console","log","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","message","className","type","placeholder","required","lassName","onClick","prev","Auth","onSocialClick","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","event","update","src","width","height","alt","class","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmenRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","onFileChange","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","maxLength","accept","for","faPlus","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","nweetArray","docs","map","Navigation","display","justifyContent","marginTop","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","Profile","refreshUser","newDisplayName","setNewDisplayName","history","useHistory","updateProfile","signOut","push","AppRouter","isLoggedIn","maxWidth","margin","exact","path","from","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a31bb5df.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\n// import { initializeApp } from \"firebase/app\";\r\n// import { getAuth } from \"firebase/auth\";\r\n// firebase의 무언가를 사용하기 위해서는 항상 import 해줘야함\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\n// Your web app's Firebase configuration\r\n// 하기의 key들은 .env에 따로 정의해주고 .env는 gitignore에 넣어 commit 되지 않게해서 key가 다른 사람들에게 공개되지 않도록함\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\n// initializeApp(firebaseConfig);\r\n\r\n// export const authService = getAuth();\r\n\r\n// Initialize Firebase\r\n// const app = initializeApp(firebaseConfig);\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onChange = (e) => {\r\n    const {\r\n      // target은 event가 일어난 부분. 그리고 target안에는 name 과 value가 들어있음\r\n      // name는 내가 input에 부여한 이름이고 value는 키보드를 통해 입력된 값\r\n      target: { name, value },\r\n    } = e;\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n    console.log(e.target.name);\r\n  };\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        // create account\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n        console.log(data);\r\n      } else {\r\n        // Log in\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n        console.log(data);\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const toggleAccount = () => {\r\n    setNewAccount((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n          lassName=\"authInput\"\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n          lassName=\"authInput\"\r\n        />\r\n        <input\r\n          className=\"authInput authSubmit\"\r\n          type=\"submit\"\r\n          value={newAccount ? \"Create Account\" : \"Log In\"}\r\n        />\r\n        {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n      <span onClick={toggleAccount} className=\"authSwitch\">\r\n        {newAccount ? \"Sign In\" : \"Create Account\"}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React from \"react\";\r\nimport { authService, firebaseInstance } from \"fbase\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport AuthForm from \"components/AuthForm\";\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (e) => {\r\n    const {\r\n      target: { name },\r\n    } = e;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={\"#04AAFF\"}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm />\r\n      <div className=\"authBtns\">\r\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\r\n    if (ok) {\r\n      //delete nweet\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n      // delte photo\r\n      await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    // console.log(nweetObj, newNweet);\r\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n      text: newNweet,\r\n      // newNweet는 input에 입력해준 값\r\n    });\r\n    setEditing(false);\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewNweet(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n            <input\r\n              onChange={onChange}\r\n              type=\"text\"\r\n              placeholder=\"Edit your nweet\"\r\n              value={newNweet}\r\n              required\r\n              className=\"formInput\"\r\n            />\r\n            <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\r\n          </form>\r\n          <button onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            Cancle\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{nweetObj.text}</h4>\r\n          {nweetObj.attachmentUrl && (\r\n            <img\r\n              src={nweetObj.attachmentUrl}\r\n              width=\"200px\"\r\n              height=\"auto\"\r\n              alt=\"profile\"\r\n            />\r\n          )}\r\n          {isOwner && (\r\n            <div class=\"nweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nweet;\r\n","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// nweets 생성을 담당하는 component\r\nconst NweetFactory = ({ userObj }) => {\r\n  const [nweet, setNweet] = useState(\"\");\r\n  // nweet과 setNweet은 form을 위한 state.\r\n  const [attachment, setAttachment] = useState(\"\");\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      // collection과 비슷한 작동을 하는데 storage의 ref의 child에 uuid를 부여함\r\n      const attachmenRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmenRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n    const nweetObj = {\r\n      text: nweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection(\"nweets\").add(nweetObj);\r\n    setNweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n  const onChange = (e) => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    setNweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    // input으로 이미지를 받아서 읽어오기위한 함수 생성\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    // event안에서 target안으로 가서 file을 받아오는것 = es6\r\n    const theFile = files[0];\r\n    // file[0]은 받아온 모든 파일 중 첫번째 파일만 받도록 하기 위해 작성\r\n    // 받아온 파일을 읽어내기 위해 API사용하고 dataUrl로 읽어오는 것(참고자료는 mdn에 있음)\r\n    // 즉, 받아온 파일을 url의 형태로 만들어 주는 것\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      // console.log(finishedEvent);\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      // onloadend에 finishedEvent의 result를 setAttachment로 설정해주는 것\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile);\r\n  };\r\n\r\n  const onClearAttachment = () => {\r\n    setAttachment(null);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={nweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label for=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        style={{\r\n          opacity: 0,\r\n        }}\r\n      />\r\n      {attachment && (\r\n        <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={attachment}\r\n            width=\"50px\"\r\n            height=\"50px\"\r\n            alt=\"profile\"\r\n            style={{\r\n              backgroundImage: attachment,\r\n            }}\r\n          />\r\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NweetFactory;\r\n","import Nweet from \"components/Nweet\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\nimport { dbService } from \"fbase\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useState } from \"react/cjs/react.development\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [nweets, setNweets] = useState([]);\r\n\r\n  // const getNweets = async () => {\r\n  // document의 id와 함께 내가 이전에 만들었던 트윗들도 모두 가져와서 setNweets에 넣어주고 보일 수 있게 해줌\r\n  //   const dbNweets = await dbService.collection(\"nweets\").get();\r\n  //   dbNweets.forEach((document) => {\r\n  //     const nweetObject = {\r\n  //       ...document.data(),\r\n  //       id: document.id,\r\n  //     };\r\n  //     // set이 붙는 함수를 쓸때 값이 아니라 함수를 전달하게 되면 리액트는 이전 값에\r\n  //     // 접근할 수 있게 해줌 => ...prev\r\n  //     setNweets((prev) => [nweetObject, ...prev]);\r\n  //   });\r\n  // };\r\n\r\n  useEffect(() => {\r\n    // getNweets();\r\n    // snapshot을 사용하면 실시간으로 추가되는 트윗을 볼 수 있음\r\n    // 우리가 무언가 지우거나 업데이트하든 뭘 하든 실행됨\r\n    dbService.collection(\"nweets\").onSnapshot((snapshot) => {\r\n      // 여기서 nweets는 우리 db collection의 이름\r\n      // 상기의 getNweets를 구현하는 새로운 방식\r\n      // 이 방식을 사용하면 더 적에 re-render하기 때문에 더 빨리 실행되도록 만들어줌\r\n      const nweetArray = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setNweets(nweetArray);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <NweetFactory userObj={userObj} />\r\n      <div>\r\n        {nweets.map((nweet) => (\r\n          <Nweet\r\n            key={nweet.id}\r\n            nweetObj={nweet}\r\n            isOwner={nweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => {\r\n  return (\r\n    <nav>\r\n      <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n        <li>\r\n          <Link to=\"/\" style={{ marginRight: 10 }}>\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link\r\n            to=\"/profile\"\r\n            style={{\r\n              marginLeft: 10,\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              fontSize: 12,\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n            <span style={{ marginTop: 10 }}>\r\n              {userObj.displayName\r\n                ? `${userObj.displayName}의 Profile`\r\n                : \"Profile\"}\r\n            </span>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import { authService, dbService } from \"fbase\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useState } from \"react/cjs/react.development\";\r\n\r\nconst Profile = ({ refreshUser, userObj }) => {\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n  const history = useHistory();\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  // const getMyNweets = async () => {\r\n  //   // db 데이터를 필터링 하는 방법\r\n  //   const nweets = await dbService\r\n  //     .collection(\"nweets\")\r\n  //     .where(\"creatorId\", \"==\", userObj.uid)\r\n  //     .orderBy(\"createdAt\")\r\n  //     .get();\r\n  //   console.log(nweets.docs.map((doc) => doc.data));\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   getMyNweets();\r\n  // }, []);\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.newDisplayName !== newDisplayName) {\r\n      // 아무런 변화가 없으면 업데이트 되지 않도록 함\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n          className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }}\r\n        />\r\n      </form>\r\n      <button className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Navigation from \"components/Navigation\";\r\nimport Profile from \"routes/Profile\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      <Switch>\r\n        {/* {isLoggedIn ? show home : show login page} */}\r\n        {isLoggedIn ? (\r\n          <div\r\n            style={{\r\n              maxWidth: 890,\r\n              width: \"100%\",\r\n              margin: \"0 auto\",\r\n              marginTop: 80,\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n            {/* 모든 route가 전부 /로 redirect 되는것 */}\r\n            <Redirect from=\"*\" to=\"/\" />\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Auth />\r\n            </Route>\r\n            <Redirect from=\"*\" to=\"/\" />\r\n          </>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  // 로그인 상태에 currentUser를 기본값으로 주어 유저의 로그인 여부를 알 수 있게함\n  // setInterval(() => {\n  //   console.log(authService.currentUser);\n  // }, 2000);\n\n  // 우리가 실제로 로그인이 되었는지 안되었는지를 알 수 있는 eventListener과 같은 역할.\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      // 기본적으로 onAuthStateChanged는 로그인이 될때, 로그아웃 할때 앱이 리셋될때를 인지함\n      if (user) {\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n\n  return (\n    <>\n      {/* init이 true가 되면 화면을 보여주고 아니면 initializing...을 보여줌 */}\n      {init ? (\n        // Boolean으로 userObj가 true일때 즉, userObj가 있을때 로그인이 됨\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing...\"\n      )}\n      {/* <footer>&copy; {new Date().getFullYear()} Nwitter</footer> */}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}